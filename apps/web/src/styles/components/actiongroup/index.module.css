/*
Copyright 2021 Watheia Labs, LLC. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

:root {
  --wa-actiongroup-button-gap-reset: 0px;
  --wa-actiongroup-quiet-compact-button-gap: var(--wa-global-dimension-size-25);
}

/* This is copied from our Flex component for now. */
.flex-container {
  /* this is necessary so that the inner margins don't affect anything outside */
  display: flex;
}

.flex-gap {
  /* apply a negative margin to counteract the margin on each item at the edges */
  margin: calc(var(--row-gap) / -2) calc(var(--column-gap) / -2);

  /* increase the width and height to account for this margin */
  /* Add 1px to fix rounding error in Safari (╯°□°)╯︵ ┻━┻ */
  width: calc(100% + calc(var(--column-gap) + 1px));
  height: calc(100% + var(--row-gap));
}

/* If the selector was .flex-gap > *, it wouldn't override when components have a margin 0 specified by a single
 * class selector, specificity is equal. Both are one class. Neither > nor * contribute to specificity.
 * We need to make it more specific, so we raise it by 1 class.
 */
.flex-container .flex-gap > * {
  /* apply half of the gap to each side of every item */
  margin: calc(var(--row-gap) / 2) calc(var(--column-gap) / 2);
}

.wa-ActionGroup {
  display: flex;
  flex-wrap: wrap;
  --column-gap: var(--wa-actionbuttongroup-text-button-gap-x);
  --row-gap: var(--wa-actionbuttongroup-text-button-gap-y);

  .wa-ActionGroup-item {
    flex-shrink: 0;
  }

  &:focus {
    outline: none;
  }
}

.wa-ActionGroup--vertical {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  --column-gap: var(--wa-actiongroup-button-gap-reset);
  --row-gap: var(--wa-actionbuttongroup-text-button-gap-y);

  .wa-ActionGroup-item {
    > :not(svg) {
      inline-size: auto;
    }
  }

  &.wa-ActionGroup--quiet {
    .wa-ActionGroup-item {
      justify-content: flex-start;
    }
  }

  &.wa-ActionGroup--justified,
  &.wa-ActionGroup--compact:not(.wa-ActionGroup--quiet) {
    align-items: stretch;
  }
}

.wa-ActionGroup--compact {
  --column-gap: calc(-1 * var(--wa-actionbutton-border-size));
  --row-gap: var(--wa-actiongroup-button-gap-reset);

  &.wa-ActionGroup--quiet {
    --column-gap: var(--wa-actiongroup-quiet-compact-button-gap);

    &.wa-ActionGroup--vertical {
      --column-gap: var(--wa-actiongroup-button-gap-reset);
      --row-gap: var(--wa-actiongroup-quiet-compact-button-gap);
    }
  }

  &:not(.wa-ActionGroup--quiet) {
    flex-wrap: nowrap;

    .wa-ActionGroup-item {
      position: relative;
      border-radius: 0;

      &:first-child {
        border-start-start-radius: var(--wa-actionbutton-border-radius);
        border-end-start-radius: var(--wa-actionbutton-border-radius);
      }

      &:last-child {
        border-start-end-radius: var(--wa-actionbutton-border-radius);
        border-end-end-radius: var(--wa-actionbutton-border-radius);
      }

      &.is-selected {
        z-index: 1;
      }

      &:hover {
        z-index: 2;
      }

      &:focus {
        z-index: 3;
      }
    }

    &.wa-ActionGroup--vertical {
      --column-gap: var(--wa-actiongroup-button-gap-reset);
      --row-gap: calc(-1 * var(--wa-actionbutton-border-size));

      .wa-ActionGroup-item {
        border-radius: 0;

        &:first-child {
          border-start-start-radius: var(--wa-actionbutton-border-radius);
          border-start-end-radius: var(--wa-actionbutton-border-radius);
          border-radius: 0;
        }

        &:last-child {
          border-end-start-radius: var(--wa-actionbutton-border-radius);
          border-end-end-radius: var(--wa-actionbutton-border-radius);
          border-radius: 0;
        }
      }
    }
  }
}

.wa-ActionGroup--justified {
  .wa-ActionGroup-item {
    flex: 1;

    > :not(svg) {
      inline-size: auto;
    }
  }

  &.wa-ActionGroup--vertical {
    .wa-ActionGroup-item {
      flex: 1 0 auto;
    }
  }
}

.wa-ActionGroup--overflowCollapse {
  flex-wrap: nowrap;
}

.wa-ActionGroup-menu {
  /* specificity must be higher than `.wa-ActionButton .wa-Icon` */
  svg.wa-ActionGroup-menu-chevron {
    order: 2;
    padding-inline-start: 0;
    padding-inline-end: var(--wa-actionbutton-icon-padding-x);
  }

  .wa-ActionGroup-menu-contents {
    /* This wrapper is needed to keep the :only-child/sibling selectors
     * in button CSS working with the additional chevron element. */
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
}

.wa-ActionGroup-item--iconOnly {
  padding-inline-end: var(--wa-actionbutton-icon-padding-x);
}
